---
# tasks file for mysql
- name: install mysql
  package:
    name: "{{ mysql_packages }}"
    state: present
  register: mysql_install_mysql
  until: mysql_install_mysql is succeeded
  retries: 3

- name: configure mysql
  ini_file:
    dest: /etc/mysql/mariadb.conf.d/50-server.cnf
    section: mysqld
    option: bind-address
    value: "{{ mysql_bind_address }}"
  notify:
    - restart mysql server

- name: initialize mysql
  command: "{{ mysql_initialize_command }}"
  args:
    creates: /var/lib/mysql/mysql
  when:
    - ansible_distribution == "Alpine" or
      ansible_distribution == "Archlinux"

- name: run mysql
  block:
    - name: start and enable mysql
      service:
        name: "{{ mysql_service }}"
        state: started
        enabled: yes
  rescue:
    - name: start mysql
      command: /usr/sbin/mysqld --debug --verbose
      args:
        creates: nothing

# - name: set mysql root user password
#   mysql_user:
#     name: root
#     password: "{{ mysql_root_password }}"
#     # priv: '*.*:ALL,GRANT'
#     check_implicit_admin: true
#   notify:
#     - restart mysql server
# 
# - name: place /root/.my.cnf
#   template:
#     src:  my.cnf.j2
#     dest: /root/.my.cnf
#     owner: root
#     mode: 0600
#   notify:
#     - restart mysql server

- name: create databases
  mysql_db:
    name: "{{ item.name }}"
    state: "{{ item.state | default('present') }}"
    target: "{{ item.target | default(omit) }}"
    encoding: "{{ item.encoding | default(omit) }}"
    collation: "{{ item.collation | default(omit) }}"
    login_unix_socket: "{{ mysql_socket }}"
  loop: "{{ mysql_databases }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - mysql_databases is defined

- name: create users
  mysql_user:
    name: "{{ item.name }}"
    state: present
    password: "{{ item.password | default(omit) }}"
    priv: "{{ item.priv | default(omit) }}"
    host: "{{ item.host | default(omit) }}"
    update_password: on_create
    login_unix_socket: "{{ mysql_socket }}"
  loop: "{{ mysql_users }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - mysql_users is defined

- name: flush handlers
  meta: flush_handlers
